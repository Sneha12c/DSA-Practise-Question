
Approach1 - Dikshtra Algorithm
Instead of running Dijkstra's algorithm for every differing character, precompute the shortest path from every character to every other character. 
This reduces the need to execute the algorithm multiple times, leveraging the fact that there are only 26 possible characters.

    vector<long long> shortest(int start ,unordered_map<int , vector<pair<int , int>>>&adj ){
    priority_queue<pair<long long, int>, vector<pair<long long, int>>,
                       greater<pair<long long, int>>>pq;
    pq.push({0 , start});
    vector<long long>res(26 , -1);
    while(!pq.empty()){
    auto p = pq.top();
    pq.pop();
    if(res[p.second]!=-1 && res[p.second] < p.first){
    continue;
    }
     for(auto i : adj[p.second]){
      long long newtotalcost = p.first + i.second;
      if( res[i.first] == -1 || newtotalcost < res[i.first] ){
       res[i.first] = newtotalcost;
       pq.push({newtotalcost , i.first});
      }
     }
    }
    return res;
    }

    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
     int n = target.length();
     unordered_map<int , vector<pair<int, int>>>adj;
     for(int i=0; i<changed.size(); i++){
      adj[original[i]-'a'].push_back({changed[i]-'a' , cost[i]});
     } 
     vector<vector<long long>>minconvcost(26 , vector<long long>(26));
     for(int i=0; i<26; i++){
      minconvcost[i] = shortest(i , adj);
     }
     long long totalcost = 0;
     for(int i=0; i<n; i++){
      if(source[i] != target[i]){
        long long convercost = minconvcost[source[i]-'a'][target[i]-'a'];
        if(convercost == -1){
         return -1;
        }
        totalcost += convercost;
      }
     }
    return totalcost;
    }

Approach 2 - Floyd Warshal Algorithm
The Floyd-Warshall algorithm works by iterating through each vertex as a potential intermediate point for all pairs of vertices. We create a matrix minCost,
where minCost[i][j] represents the minimum cost to travel from vertex i to j. The algorithm involves three nested loops to update minCost[i][j] by considering
whether a shorter path exists through an intermediate vertex k. After completing these iterations,
minCost will hold the minimum costs for all character pairs.

   long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
     vector<vector<long long>>mincost(26 , vector<long long>(26 , INT_MAX)); 
     for(int i=0; i<changed.size(); i++){
          int startChar = original[i] - 'a';
            int endChar = changed[i] - 'a';
            mincost[startChar][endChar] =
                min(mincost[startChar][endChar], (long long)cost[i]);
     }
     for(int k=0; k<26; k++){
       for(int i=0; i<26; i++){
        for(int j=0; j<26; j++){
         mincost[i][j] = min(mincost[i][j] , mincost[i][k] + mincost[k][j]);
        }
       }
     }
     long long totalcost = 0;
     for(int i=0; i<source.length(); i++){
        if(source[i] == target[i]){
         continue;
        }
        if(mincost[source[i]-'a'][target[i]-'a'] >= INT_MAX){
         return -1;
        }
        totalcost += mincost[source[i]-'a'][target[i]-'a'];
     }
    return totalcost;
    }



